from datetime import datetime
from fastapi import APIRouter, Depends, HTTPException, Response, Request
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session

from app.database import get_db
from app.models import User
from app.schemas import UserLogin, UserLoginResponse, UserCreate, UserRegisterResponse
from app.auth import verify_password, hash_password, create_access_token, get_current_user

router = APIRouter()


@router.post("/login/")
def login_user(user: UserLogin, response: Response, db: Session = Depends(get_db)):
    print("‚û°Ô∏è –í—ã–∑–≤–∞–Ω login_user –¥–ª—è:", user.email, flush=True)

    db_user = db.query(User).filter(User.email == user.email).first()
    if not db_user or not verify_password(user.password, db_user.hashed_password):
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å", flush=True)
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    # ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    access_token = create_access_token({"sub": db_user.email})

    # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏ (–≤–∫–ª—é—á–∞–µ–º CORS-–¥–æ—Å—Ç—É–ø –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞)
    response = JSONResponse(content={"message": "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥"})
    response.set_cookie(
        key="token",
        value=access_token,
        httponly=True,
        secure=False,  # ‚ö†Ô∏è –î–õ–Ø HTTPS –°–¢–ê–í–¨ True
        samesite="None",  # üî• –î–õ–Ø –†–ê–ë–û–¢–´ –° –õ–û–ö–ê–õ–¨–ù–´–ú –§–†–û–ù–¢–û–ú
        domain="localhost"  # üî• –î–õ–Ø localhost:5173
    )

    return response


@router.post("/register/")
def register_user(user: UserCreate, response: Response, db: Session = Depends(get_db)):
    print("‚û°Ô∏è –í—ã–∑–≤–∞–Ω register_user –¥–ª—è:", user.email, flush=True)

    existing_user = db.query(User).filter(User.email == user.email).first()
    if existing_user:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è", flush=True)
        raise HTTPException(status_code=400, detail="Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

    hashed_password = hash_password(user.password)
    new_user = User(
        username=user.username,
        email=user.email,
        hashed_password=hashed_password,
        is_active=True,
        created_at=datetime.utcnow()
    )
    db.add(new_user)
    db.commit()
    db.refresh(new_user)

    # ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    access_token = create_access_token({"sub": new_user.email})

    # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏
    response = JSONResponse(content={"message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"})
    response.set_cookie(
        key="token",
        value=access_token,
        httponly=True,
        secure=False,
        samesite="None",
        domain="localhost"
    )

    return response


@router.post("/logout/")
def logout_user(response: Response):
    response = JSONResponse(content={"message": "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"})
    response.delete_cookie("token")
    return response


@router.get("/me")
def get_current_user_info(user: User = Depends(get_current_user)):
    return {
        "id": user.id,
        "username": user.username,
        "email": user.email
    }
