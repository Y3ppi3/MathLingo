from datetime import datetime
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.database import get_db
from app.models import User
from app.schemas import UserCreate, UserRegisterResponse
from app.auth import hash_password, create_access_token

router = APIRouter()


@router.post("/register/", response_model=UserRegisterResponse)
def register_user(user: UserCreate, db: Session = Depends(get_db)):
    print("‚û°Ô∏è –í—ã–∑–≤–∞–Ω register_user –¥–ª—è:", user.email, flush=True)  # ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å

    existing_user = db.query(User).filter(User.email == user.email).first()
    if existing_user:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è", flush=True)
        raise HTTPException(status_code=400, detail="Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

    hashed_password = hash_password(user.password)
    print("‚úÖ –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω", flush=True)

    new_user = User(
        username=user.username,
        email=user.email,
        hashed_password=hashed_password,
        is_active=True,
        created_at=datetime.utcnow()
    )

    db.add(new_user)
    db.commit()
    db.refresh(new_user)

    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –ë–î:", new_user.id, flush=True)

    access_token = create_access_token({"sub": new_user.email})
    print("‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:", access_token, flush=True)

    response = UserRegisterResponse(
        id=new_user.id,
        username=new_user.username,
        email=new_user.email,
        is_active=new_user.is_active,
        created_at=new_user.created_at,
        token=access_token
    )

    print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-–æ—Ç–≤–µ—Ç:", response, flush=True)
    return response
